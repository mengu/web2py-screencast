(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/mengu/web2py-screencast/applications/blog/controllers/posts.py'
p4
sS'code'
p5
S'# coding: utf8\n# try something like\n@auth.requires_membership(\'Admin\')\ndef new():\n    postform = SQLFORM(db.post)\n    for key, value in postform[0]: print key, value\n    categorylist = db(db.category.id > 0).select()\n    for category in categorylist:\n        postform[0].append(XML(str(INPUT(_type="checkbox", _name="category", _value=category.id))+category.title))\n    postform[0].append(DIV("Tags:", INPUT(_type="textbox", _name="tags", _size="50")))\n    if postform.accepts(request.vars, session):\n        if \'category\' in request.vars:\n            postedcategories = [int(postedcategory) for postedcategory in request.vars.category]\n            for postedcategory in postedcategories:\n                db.relations.insert(post=postform.vars.id, category=postedcategory, relationtype=\'category\')\n        if \'tags\' in request.vars:\n            for tag in request.vars.tags.split(", "):\n                db.relations.insert(post=postform.vars.id, tag=tag, relationtype=\'tag\')\n        redirect(URL(r=request, f="view", args=postform.vars.id))\n    return dict(postform=postform)\n\n@auth.requires_membership(\'Admin\')\ndef edit():\n    postid = request.args(0)\n    post = db(db.post.id == postid).select()[0]\n    relations = post.relations.select()\n    postcategories = [relation.category for relation in relations if relation.relationtype == \'category\']\n    posttags = [relation.tag for relation in relations if relation.relationtype == \'tag\']\n    editform = SQLFORM(db.post, post, deletable=True)\n    categorylist = db(db.category.id > 0).select()\n    for category in categorylist:\n        checked = 1 if category.id in postcategories else 0\n        editform[0].append(XML(str(INPUT(_type="checkbox", _name="category", _value=category.id, value=checked))+category.title))\n    editform[0].append(DIV(XML("<strong>Tags:</strong>"), INPUT(_type="textbox", _name="tags", _size="50", _value=", ".join(posttags), _style="margin-left: 100px;")))\n    if editform.accepts(request.vars, session):\n        if \'category\' in request.vars:\n            postedcategories = [int(postedcategory) for postedcategory in request.vars.category]\n            for postedcategory in postedcategories:\n                if postedcategory not in postcategories:\n                    db.relations.insert(post=postid, category=postedcategory, relationtype=\'category\')\n            for postcategory in postcategories:\n                if postcategory not in postedcategories:\n                    db((db.relations.category == postcategory)&(db.relations.post == postid)).delete()\n        if \'tags\' in request.vars:\n            for tag in request.vars.tags.split(", "):\n                if tag not in posttags:\n                    db.relations.insert(post=postid, tag=tag, relationtype=\'tag\')\n            for posttag in posttags:\n                if posttag not in request.vars.tags.split(", "):\n                    db((db.relations.post == postid)&(db.relations.tag == posttag)).delete()\n        redirect(URL(r=request, f="view", args=postid))\n    return dict(editform=editform, post=post, posttags=posttags)\n\ndef view():\n    postid = request.args(0)\n    post = db(db.post.id == postid).select()[0]\n    relations = db(db.relations.post == postid).select()\n    categories = dict((relation.category.id, relation.category.title) for relation in relations if relation.relationtype == \'category\')\n    tags = [relation.tag for relation in relations if relation.relationtype == \'tag\']\n    db.comment.post.default = postid\n    commentform = SQLFORM(db.comment)\n    if commentform.accepts(request.vars, session):\n        redirect(URL(r=request, f="view", args=postid))\n    return dict(post=post, commentform=commentform, categories=categories, tags=tags)\n\n@auth.requires_membership(\'Admin\')\ndef manageposts():\n    posts = db(db.post.id > 0).select()\n    return dict(posts=posts)\n\n@auth.requires_membership(\'Admin\')\ndef deleteposts():\n    for postid in request.vars.delete:\n        db(db.post.id == int(postid)).delete()\n        db(db.comment.post == int(postid)).delete()\n        db(db.relations.post == int(postid)).delete()\n    redirect(URL(r=request, f="manageposts"))\n\nresponse._vars=response._caller(new)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/mengu/web2py-screencast/gluon/restricted.py", line 184, in restricted\n    exec ccode in environment\n  File "/home/mengu/web2py-screencast/applications/blog/controllers/posts.py", line 79, in <module>\n  File "/home/mengu/web2py-screencast/gluon/globals.py", line 103, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mengu/web2py-screencast/gluon/tools.py", line 1644, in f\n    return action(*a, **b)\n  File "/home/mengu/web2py-screencast/applications/blog/controllers/posts.py", line 6, in new\n    for key, value in postform[0]: print key, value\nValueError: too many values to unpack\n'
p8
s.