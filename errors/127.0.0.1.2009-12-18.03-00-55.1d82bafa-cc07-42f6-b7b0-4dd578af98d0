(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/mengu/web2py-screencast/applications/blog/models/db.py'
p4
sS'code'
p5
S'# coding: utf8\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db=db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db=MEMDB(Client())\nelse:                                         # else use a normal relational database\n    db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## comment/uncomment as needed\n\nfrom gluon.tools import *\nauth=Auth(globals(),db)                      # authentication/authorization\nauth.settings.hmac_key=\'sha512:aeb13675-cc55-4e14-b912-763fcafdfd84\'\nauth.define_tables()                         # creates all needed tables\ncrud=Crud(globals(),db)                      # for CRUD helpers using auth\nservice=Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\n\n# crud.settings.auth=auth                      # enforces authorization on crud\n# mail=Mail()                                  # mailer\n# mail.settings.server=\'smtp.gmail.com:587\'    # your SMTP server\n# mail.settings.sender=\'you@gmail.com\'         # your email\n# mail.settings.login=\'username:password\'      # your credentials or None\n# auth.settings.mailer=mail                    # for user email verification\n# auth.settings.registration_requires_verification = True\n# auth.settings.registration_requires_approval = True\n# auth.messages.verify_email = \\\n#  \'Click on the link http://.../user/verify_email/%(key)s to verify your email\'\n## more options discussed in gluon/tools.py\n#########################################################################\n\n#########################################################################\n## Define your tables below, for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\ndb.define_table(\'post\',\n    Field(\'user\', db.auth_user, readable=False, writable=False),\n    Field(\'title\'),\n    Field(\'body\', \'text\'),\n    Field(\'dateline\', \'datetime\', default=request.now, readable=False, writable=False),\n    Field(\'file\', \'upload\')\n)\n\ndb.post.id.readable = False\ndb.post.id.writable = False\nif auth.user:\n    db.post.user.default = auth.user.id\n\nComment = db.define_table(\'comment\',\n    Field(\'post\', db.post, readable=False, writable=False),\n    Field(\'name\', requires=IS_NOT_EMPTY(error_message="Please enter your name.")),\n    Field(\'email\'),\n    Field(\'commentbody\', \'text\', requires=IS_NOT_EMPTY(error_message="Please enter your comment.")),\n    Field(\'dateline\', \'datetime\', default=request.now, readable=False, writable=False)\n)\n\ncomments = Comment.get(email=\'mengukagan@gmail.com\')\nprint comments[0].name\n\ndb.define_table(\'category\',\n    Field(\'title\')\n)\n\ndb.define_table(\'relations\',\n    Field(\'post\', db.post),\n    Field(\'category\', db.category),\n    Field(\'tag\'),\n    Field(\'relationtype\')\n)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/mengu/web2py-screencast/gluon/restricted.py", line 184, in restricted\n    exec ccode in environment\n  File "/home/mengu/web2py-screencast/applications/blog/models/db.py", line 85, in <module>\n    comments = Comment.get(email=\'mengukagan@gmail.com\')\n  File "/home/mengu/web2py-screencast/gluon/sql.py", line 1923, in get\n    resultlist[i].__setattr__(field, result[j])\nKeyError: 0\n'
p8
s.